{
  "openapi": "3.0.0",
  "info": {
    "title": "Kasir Laundry Pro",
    "version": "1.0.0",
    "description": "API Routes and schema details of Kasir Laundry Pro Services"
  },
  "servers": [
    {
      "url": "https://kasirlaundrypro.netlify.app/api"
    }
  ],
  "paths": {
    "/auth/login": {
      "post": {
        "summary": "Logs in a user",
        "description": "Logs in a user with credentials",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password"
                  }
                },
                "required": [
                  "email",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful login",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Login berhasil."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email tidak ditemukan"
                    }
                  }
                }
              }
            }
          }
          }
          }
        ]
        }
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "summary": "Logs out a user",
        "description": "Logs out a user and invalidates their session or token",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Logout berhasil."
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Terjadi kesalahan pada server."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "summary": "Signs up a new user",
        "description": "Creates a new user account",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "User's phone number"
                  },
                  "name": {
                    "type": "string",
                    "description": "User's name"
                  },
                  "password": {
                    "type": "string",
                    "description": "User's password"
                  }
                },
                "required": [
                  "email",
                  "phone_number",
                  "name",
                  "password"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Signup berhasil."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Email sudah digunakan."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/change-password": {
      "post": {
        "summary": "Changes the user's password",
        "description": "Allows a user to change their password",
        "tags": [
          "Auth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "User's email address"
                  },
                  "currentPassword": {
                    "type": "string",
                    "description": "User's current password"
                  },
                  "newPassword": {
                    "type": "string",
                    "description": "User's new password"
                  }
                },
                "required": [
                  "email",
                  "currentPassword",
                  "newPassword"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password successfully changed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Password updated successfully."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Current password is incorrect."
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Current password is incorrect."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/google": {
      "get": {
        "summary": "Initiates Google OAuth authentication",
        "description": "Redirects to Google for authentication",
        "tags": [
          "Auth"
        ],
        "responses": {
          "302": {
            "description": "Redirects to Google for authentication"
          }
        }
      }
    },
    "/auth/google/callback": {
      "get": {
        "summary": "Handles Google OAuth callback",
        "description": "Handles the callback from Google after authentication",
        "tags": [
          "Auth"
        ],
        "responses": {
          "302": {
            "description": "Redirects to the frontend application with an authentication token"
          },
          "500": {
            "description": "Terjadi kesalahan server"
          }
        }
      }
    },
    "/auth/verify-email": {
      "get": {
        "summary": "Verify user email",
        "tags": [
          "Auth"
        ],
        "description": "Validates the email verification token and updates the user's status to 'verified'.",
        "parameters": [
          {
            "in": "query",
            "name": "token",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The email verification token"
          }
        ],
        "responses": {
          "200": {
            "description": "Email verified successfully."
          },
          "400": {
            "description": "Invalid or expired verification link."
          },
          "500": {
            "description": "Terjadi kesalahan server."
          }
        }
      }
    },
    "/customer": {
      "get": {
        "summary": "Get all customers",
        "description": "Retrieve a list of all customers",
        "tags": [
          "Customer"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter Data by name, phone number, email"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new customer",
        "description": "Create a new customer record",
        "tags": [
          "Customer"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/customer/{id}": {
      "get": {
        "summary": "Get a customer by ID",
        "description": "Retrieve a customer record by ID",
        "tags": [
          "Customer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the customer to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "put": {
        "summary": "Update a customer",
        "description": "Update an existing customer record by ID",
        "tags": [
          "Customer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the customer to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Customer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a customer",
        "description": "Delete a customer record by ID",
        "tags": [
          "Customer"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the customer to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Customer deleted successfully"
          },
          "404": {
            "description": "Customer not found"
          }
        }
      }
    },
    "/duration": {
      "get": {
        "summary": "Get all durations",
        "description": "Retrieve a list of all durations",
        "tags": [
          "Duration"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter Data by name, duration, type"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DurationAll"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new duration",
        "description": "Create a new duration record",
        "tags": [
          "Duration"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DurationRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Duration created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/duration/{id}": {
      "put": {
        "summary": "Update a duration",
        "description": "Update an existing duration record by ID",
        "tags": [
          "Duration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the duration to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DurationRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Durasi berhasil diperbarui",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DurationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          },
          "404": {
            "description": "Durasi tidak ditemukan"
          }
        }
      },
      "delete": {
        "summary": "Delete a duration",
        "description": "Delete a duration record by ID",
        "tags": [
          "Duration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the duration to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Duration deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "example": "success"
                    },
                    "message": {
                      "type": "string",
                      "example": "Duration deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Durasi tidak ditemukan"
          }
        }
      },
      "get": {
        "summary": "Get a duration by ID",
        "description": "Retrieve a duration by its ID",
        "tags": [
          "Duration"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the duration to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DurationAll"
                }
              }
            }
          },
          "404": {
            "description": "Durasi tidak ditemukan"
          }
        }
      }
    },
    "/email-support": {
      "post": {
        "summary": "Send an Email",
        "description": "Send a new email support",
        "tags": [
          "Email Support"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Email sended successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/note": {
      "get": {
        "summary": "Get a single note",
        "description": "Retrieve a single note",
        "tags": [
          "Note"
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of a single note",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Create or update a note",
        "description": "Create a new note if none exists, or update the latest note if one is found",
        "tags": [
          "Note"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NoteRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Note created or updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/service": {
      "get": {
        "summary": "Get all services",
        "description": "Retrieve a list of all services",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "filter",
            "schema": {
              "type": "string"
            },
            "description": "Filter Data by name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ServiceAll"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new service",
        "description": "Create a new service record",
        "tags": [
          "Services"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Layanan berhasil dibuat",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/service/{id}": {
      "put": {
        "summary": "Update a service",
        "description": "Update an existing service record",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Service updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          },
          "404": {
            "description": "Layanan tidak ditemukan"
          }
        }
      },
      "delete": {
        "summary": "Delete a service",
        "description": "Delete an existing service record",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Service deleted successfully"
          },
          "404": {
            "description": "Layanan tidak ditemukan"
          }
        }
      },
      "get": {
        "summary": "Get a service by ID",
        "description": "Retrieve a service by its ID",
        "tags": [
          "Services"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the service to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Service"
                }
              }
            }
          },
          "404": {
            "description": "Layanan tidak ditemukan"
          }
        }
      }
    },
    "/transaction": {
      "get": {
        "summary": "Get all transaction items",
        "description": "Retrieve a list of all transaction items",
        "tags": [
          "Transaction"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "enum": [
                "Diproses",
                "Selesai",
                "Siap Diambil"
              ]
            },
            "description": "Filter by transaction status"
          },
          {
            "in": "query",
            "name": "customer",
            "schema": {
              "type": "string"
            },
            "description": "Filter by customer UUID"
          },
          {
            "in": "query",
            "name": "date",
            "schema": {
              "type": "string"
            },
            "description": "Filter by date created"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new transaction item",
        "description": "Create a new transaction record",
        "tags": [
          "Transaction"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransactionBodyRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Transaction item created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          }
        }
      }
    },
    "/transaction/{id}": {
      "put": {
        "summary": "Update a transaction item",
        "description": "Update an existing transaction record by ID",
        "tags": [
          "Transaction"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the transaction item to update"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transaction item updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input"
          },
          "404": {
            "description": "Transaction item not found"
          }
        }
      },
      "get": {
        "summary": "Get transaction item details",
        "description": "Retrieve details of a specific transaction item by ID",
        "tags": [
          "Transaction"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the transaction item to retrieve"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetail"
                }
              }
            }
          },
          "404": {
            "description": "Transaction item not found"
          }
        }
      }
    },
    "/user/upload-logo": {
      "post": {
        "summary": "Uploads a temporary logo file",
        "description": "Uploads a logo file to Supabase Storage and returns the file path.",
        "tags": [
          "User"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The logo file to upload"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "filePath": {
                      "type": "string",
                      "description": "The path of the uploaded file in Supabase Storage"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Tidak ada file yang diunggah"
          },
          "500": {
            "description": "Gagal mengunggah file"
          }
        }
      }
    },
    "/user/details": {
      "get": {
        "summary": "Retrieve user details",
        "description": "Fetches the details of a user by their ID.",
        "tags": [
          "User"
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User tidak ditemukan"
          }
        }
      }
    },
    "/user/{id}": {
      "put": {
        "summary": "Update user details and optionally submit logo",
        "description": "Updates user details including optional logo upload. If a logo file path is provided, it will be moved from temporary to final location.",
        "tags": [
          "User"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the user"
                  },
                  "email": {
                    "type": "string",
                    "description": "Email address of the user"
                  },
                  "phone_number": {
                    "type": "string",
                    "description": "Phone number of the user"
                  },
                  "address": {
                    "type": "string",
                    "description": "Address of the user"
                  },
                  "logo": {
                    "type": "string",
                    "description": "Path of the uploaded logo in Supabase Storage"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Rincian pengguna berhasil diperbarui"
          },
          "400": {
            "description": "Missing required fields or invalid input"
          },
          "404": {
            "description": "Pengguna tidak ditemukan"
          },
          "500": {
            "description": "Failed to update user details or process logo"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User's unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user",
            "example": "john.doe@example.com"
          },
          "oauth": {
            "type": "boolean",
            "description": "Whether the user is authenticated via OAuth"
          },
          "token": {
            "type": "string",
            "description": "Authentication token for the user"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the user (nullable)",
            "nullable": true,
            "example": "+12345678901"
          },
          "logo": {
            "type": "string",
            "description": "URL of the user's logo (nullable)",
            "nullable": true,
            "example": "https://example.com/logo.png"
          },
          "address": {
            "type": "string",
            "description": "Address of the user (nullable)",
            "nullable": true,
            "example": "123 Main St, Springfield"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the user was created"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp of when the user was last updated"
          }
        },
        "required": [
          "name",
          "email"
        ]
      },
      "Customer": {
        "type": "object",
        "required": [
          "id",
          "created_at",
          "name",
          "phone_number",
          "address",
          "gender"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier for the contact",
            "example": "2f19fb0e-2926-418d-82ac-c2dc33a0f4d3"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Timestamp when the contact was created",
            "example": "2024-08-07T13:58:23.934Z"
          },
          "name": {
            "type": "string",
            "description": "Name of the contact",
            "example": "sasaksj"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the contact",
            "example": "0238239238"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email address of the contact (nullable)",
            "example": null
          },
          "address": {
            "type": "string",
            "description": "Address of the contact",
            "example": "kajsajs"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the contact",
            "example": "Perempuan"
          }
        }
      },
      "CustomerRequestBody": {
        "type": "object",
        "required": [
          "name",
          "phone_number",
          "gender"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the customer",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Email address of the customer",
            "example": "john.doe@example.com"
          },
          "address": {
            "type": "string",
            "description": "Address of the customer",
            "example": "123 Main St, Springfield"
          },
          "phone_number": {
            "type": "string",
            "description": "Phone number of the customer, must be between 10 and 15 digits, and can optionally start with a plus sign",
            "pattern": "^[+]?[0-9]{10,15}$",
            "example": "+12345678901"
          },
          "gender": {
            "type": "string",
            "enum": [
              "Laki-laki",
              "Perempuan"
            ],
            "description": "Gender of the customer (Laki-laki or Perempuan)",
            "example": "Laki-laki"
          }
        }
      },
      "CustomerResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Customer created successfully"
          },
          "data": {
            "$ref": "#/components/schemas/Customer"
          }
        }
      },
      "DurationAll": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the duration",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Name of the duration",
            "example": "One Day"
          },
          "duration": {
            "type": "number",
            "description": "Duration value",
            "example": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "Hari",
              "Jam"
            ],
            "description": "Type of duration (Hari or Jam)",
            "example": "Hari"
          }
        }
      },
      "DurationRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the duration",
            "example": "One Day"
          },
          "duration": {
            "type": "number",
            "description": "Duration value",
            "example": 1
          },
          "type": {
            "type": "string",
            "enum": [
              "Hari",
              "Jam"
            ],
            "description": "Type of duration (Hari or Jam)",
            "example": "Hari"
          }
        }
      },
      "DurationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Duration created successfully"
          },
          "data": {
            "$ref": "#/components/schemas/DurationAll"
          }
        }
      },
      "EmailRequestBody": {
        "type": "object",
        "required": [
          "title",
          "message"
        ],
        "properties": {
          "title": {
            "type": "string",
            "description": "Email title",
            "example": "Need some help"
          },
          "message": {
            "type": "string",
            "description": "Email message body",
            "example": "Aplikasi ini sangat sangat bagus"
          }
        }
      },
      "EmailResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Email support submitted successfully."
          }
        }
      },
      "Note": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "notes": {
            "type": "string",
            "description": "The note content",
            "example": "This is a note."
          }
        }
      },
      "NoteRequestBody": {
        "type": "object",
        "required": [
          "content"
        ],
        "properties": {
          "notes": {
            "type": "string",
            "description": "The note content",
            "example": "This is a note."
          }
        }
      },
      "NoteResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Catatan berhasil dibuat"
          },
          "data": {
            "$ref": "#/components/schemas/Note"
          }
        }
      },
      "ServiceAll": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the service",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Service name",
            "example": "Dry Cleaning"
          }
        }
      },
      "Duration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Duration ID",
            "example": "1"
          },
          "duration": {
            "type": "number",
            "description": "Duration in minutes",
            "example": 30
          },
          "duration_name": {
            "type": "string",
            "description": "Name of the duration",
            "example": "Half Hour"
          },
          "price": {
            "type": "number",
            "description": "Price for the duration",
            "example": 10000
          }
        }
      },
      "Service": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the service",
            "example": "1"
          },
          "name": {
            "type": "string",
            "description": "Service name",
            "example": "Dry Cleaning"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "kg"
          },
          "durations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Duration"
            },
            "example": [
              {
                "id": "1",
                "duration": 30,
                "duration_name": "Half Hour",
                "price": 10000
              },
              {
                "id": "2",
                "duration": 60,
                "duration_name": "One Hour",
                "price": 15000
              }
            ]
          }
        }
      },
      "ServiceRequestBody": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service name",
            "example": "Dry Cleaning"
          },
          "unit": {
            "type": "string",
            "description": "Unit of measurement",
            "example": "kg"
          },
          "durations": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "duration": {
                  "type": "string",
                  "description": "UUID of the duration",
                  "example": "550e8400-e29b-41d4-a716-446655440000"
                },
                "price": {
                  "type": "number",
                  "description": "Price for the duration",
                  "example": 10000
                }
              }
            },
            "example": [
              {
                "duration": "550e8400-e29b-41d4-a716-446655440000",
                "price": 10000
              },
              {
                "duration": "550e8400-e29b-41d4-a716-446655440001",
                "price": 15000
              }
            ]
          }
        },
        "required": [
          "name",
          "unit",
          "durations"
        ]
      },
      "ServiceResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Layanan berhasil dibuat"
          },
          "data": {
            "$ref": "#/components/schemas/Service"
          }
        },
        "example": {
          "status": "success",
          "message": "Layanan berhasil dibuat",
          "data": {
            "id": "1",
            "name": "Dry Cleaning",
            "unit": "kg",
            "durations": [
              {
                "id": "550e8400-e29b-41d4-a716-446655440000",
                "duration": 30,
                "duration_name": "Half Hour",
                "price": 10000
              },
              {
                "id": "550e8400-e29b-41d4-a716-446655440001",
                "duration": 60,
                "duration_name": "One Hour",
                "price": 15000
              }
            ]
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the transaction"
          },
          "customer": {
            "type": "string",
            "description": "Customer's Name"
          },
          "duration": {
            "type": "string",
            "description": "Duration Name"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction",
            "enum": [
              "Diproses",
              "Selesai",
              "Siap Diambil"
            ]
          }
        }
      },
      "TransactionDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the transaction"
          },
          "customer": {
            "type": "string",
            "description": "UUID of the customer",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "duration": {
            "type": "string",
            "description": "UUID of the duration",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "customer_name": {
            "type": "string",
            "description": "Customer's Name",
            "example": "Brian Kliwon"
          },
          "duration_name": {
            "type": "string",
            "description": "Duration Name",
            "example": "Express"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction",
            "enum": [
              "Diproses",
              "Selesai",
              "Siap Diambil"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "description": "UUID of the service",
                  "example": "550e8400-e29b-41d4-a716-446655440982"
                },
                "service_name": {
                  "type": "string",
                  "description": "Name of the service",
                  "example": "Reguler"
                },
                "qty": {
                  "type": "number",
                  "description": "Total quantity per service",
                  "example": 23
                }
              }
            },
            "example": [
              {
                "service": "550e8400-e29b-41d4-a716-446655440000",
                "qty": 2
              },
              {
                "service": "550e8400-e29b-41d4-a716-446655440001",
                "qty": 3
              }
            ]
          }
        }
      },
      "TransactionBodyRequest": {
        "type": "object",
        "required": [
          "customer",
          "duration",
          "status",
          "items"
        ],
        "properties": {
          "customer": {
            "type": "string",
            "description": "UUID of the customer",
            "example": "550e8400-e29b-41d4-a716-446655440000"
          },
          "duration": {
            "type": "string",
            "description": "UUID of the duration",
            "example": "550e8400-e29b-41d4-a716-446655440001"
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction",
            "enum": [
              "Diproses",
              "Selesai",
              "Siap Diambil"
            ]
          },
          "items": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "service": {
                  "type": "string",
                  "description": "UUID of the service",
                  "example": "550e8400-e29b-41d4-a716-446655440982"
                },
                "qty": {
                  "type": "number",
                  "description": "Total quantity per service",
                  "example": 23
                }
              }
            },
            "example": [
              {
                "service": "550e8400-e29b-41d4-a716-446655440000",
                "qty": 2
              },
              {
                "service": "550e8400-e29b-41d4-a716-446655440001",
                "qty": 3
              }
            ]
          }
        }
      },
      "TransactionResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "example": "success"
          },
          "message": {
            "type": "string",
            "example": "Transaction created successfully"
          },
          "data": {
            "$ref": "#/components/schemas/TransactionDetail"
          }
        }
      },
      "UserRequestBody": {
        "type": "object",
        "required": [
          "name",
          "email"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the user",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address of the user",
            "example": "john.doe@example.com"
          },
          "phone_number": {
            "type": "string",
            "nullable": true,
            "description": "Phone number of the user (nullable)",
            "example": "+12345678901"
          },
          "address": {
            "type": "string",
            "nullable": true,
            "description": "Address of the user (nullable)",
            "example": "123 Main St, Springfield"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication APIs"
    },
    {
      "name": "Customer",
      "description": "Customer management APIs"
    },
    {
      "name": "Duration",
      "description": "Duration management APIs"
    },
    {
      "name": "Email Support",
      "description": "Email Support APIs"
    },
    {
      "name": "Note",
      "description": "Notes management APIs"
    },
    {
      "name": "Services",
      "description": "Service management APIs"
    },
    {
      "name": "Transaction",
      "description": "Transaction management APIs"
    },
    {
      "name": "User",
      "description": "User management APIs"
    }
  ]
}